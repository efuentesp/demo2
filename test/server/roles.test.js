// Generated by CoffeeScript 1.6.3
var Permission, Role, app, mongoose, should;

mongoose = require("mongoose");

should = require("should");

app = require("../../server/main");

Permission = mongoose.model('Permission');

Role = mongoose.model('Role');

describe("Role Model", function() {
  before(function(done) {
    var p, permission, _i, _len, _ref;
    mongoose.connection.db.dropCollection("roles", function(err) {
      if (err) {
        return done(err);
      }
    });
    this.permissions = [
      {
        subject: "Schools",
        action: "create",
        displayName: "Create new School",
        description: "Description to create a new School."
      }, {
        subject: "Schools",
        action: "edit",
        displayName: "Edit a School",
        description: "Description to edit a new School."
      }, {
        subject: "Schools",
        action: "destroy",
        displayName: "Destroy a School",
        description: "Description to destroy a School."
      }
    ];
    _ref = this.permissions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      permission = new Permission(p);
      permission.save(function(err) {
        if (err) {
          return done(err);
        }
      });
    }
    return done();
  });
  it("should register a new Role", function(done) {
    var permissions;
    permissions = [
      {
        subject: "Schools",
        action: "create",
        displayName: "Create new School",
        description: "Description to create a new School."
      }, {
        subject: "Schools",
        action: "destroy",
        displayName: "Destroy a School",
        description: "Description to destroy a School."
      }
    ];
    this.role = new Role({
      name: "admin",
      displayName: "Admin",
      description: "Site Administrator",
      permissions: permissions
    });
    this.role.save(function(err) {
      if (err) {
        return done(err);
      }
    });
    this.role.permissions.length.should.equal(2);
    return done();
  });
  it("should add a new valid Permission to the Role", function(done) {
    var permission,
      _this = this;
    permission = {
      subject: 'Schools',
      action: 'edit'
    };
    return this.role.addPermission(permission, function(err) {
      should.not.exist(err);
      _this.role.permissions.should.have.lengthOf(3);
      return done();
    });
  });
  it("should add a new invalid Permission to the Role", function(done) {
    var permission,
      _this = this;
    permission = {
      subject: 'XXX',
      action: 'edit'
    };
    return this.role.addPermission(permission, function(err) {
      should.exist(err);
      _this.role.permissions.should.have.lengthOf(2);
      return done();
    });
  });
  it("should check if Role has a given Permission", function(done) {
    Permission.findOne({
      subject: "Schools",
      action: "edit"
    }, function(err, permission) {
      var role;
      if (err) {
        throw err;
      }
      role = new Role({
        name: "admin",
        displayName: "Admin",
        description: "Site Administrator"
      });
      return role.save(function(err) {
        if (err) {
          throw err;
        }
        role.addPermission(permission);
        return role.save(function(err) {
          if (err) {
            throw err;
          }
          return role.hasPermission("Schools", "edit").should.equal(true);
        });
      });
    });
    return done();
  });
  it("should not add duplicated Permissions", function(done) {
    Permission.findOne({
      subject: "Schools",
      action: "edit"
    }, function(err, permission) {
      var role;
      if (err) {
        throw err;
      }
      role = new Role({
        name: "admin",
        displayName: "Admin",
        description: "Site Administrator"
      });
      return role.save(function(err) {
        if (err) {
          throw err;
        }
        role.addPermission(permission);
        return role.save(function(err) {
          if (err) {
            throw err;
          }
          role.hasPermission("Schools", "edit").should.equal(true);
          role.permissions.length.should.equal(2);
          role.addPermission(permission);
          return role.save(function(err) {
            if (err) {
              throw err;
            }
            return role.permissions.length.should.equal(3);
          });
        });
      });
    });
    return done();
  });
  return after(function(done) {
    mongoose.connection.db.dropCollection("roles", function(err) {
      if (err) {
        throw err;
      }
    });
    return done();
  });
});
