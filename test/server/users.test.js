// Generated by CoffeeScript 1.6.3
var Permission, Role, User, app, mongoose, should;

mongoose = require("mongoose");

should = require("should");

app = require("../../server/main");

Permission = mongoose.model('Permission');

Role = mongoose.model('Role');

User = mongoose.model('User');

describe("User Model", function() {
  var _this = this;
  before(function(done) {
    var p, permission, permissions, role, _i, _len;
    permissions = [
      {
        subject: "Schools",
        action: "create",
        displayName: "Create new School",
        description: "Description to create a new School."
      }, {
        subject: "Schools",
        action: "edit",
        displayName: "Edit a School",
        description: "Description to edit a new School."
      }, {
        subject: "Schools",
        action: "destroy",
        displayName: "Destroy a School",
        description: "Description to destroy a School."
      }
    ];
    for (_i = 0, _len = permissions.length; _i < _len; _i++) {
      p = permissions[_i];
      permission = new Permission(p);
      permission.save(function(err) {
        if (err) {
          return done(err);
        }
      });
    }
    role = new Role({
      name: "admin",
      displayName: "Admin",
      description: "Site Administrator"
    });
    return role.save(done);
  });
  it("should register a new User", function(done) {
    _this.user = new User({
      username: "test",
      password: "password",
      email: "test@mail.com"
    });
    return _this.user.save(function(err) {
      should.not.exist(err);
      return done();
    });
  });
  it("should add a new Role to User", function(done) {
    return _this.user.addRole('admin', function(err) {
      should.not.exist(err);
      return _this.user.save(function(err) {
        should.not.exist(err);
        _this.user.roles.should.have.lengthOf(1);
        return done();
      });
    });
  });
  it("should notify when a Role was previously added", function(done) {
    return _this.user.addRole('admin', function(err) {
      should.exist(err);
      _this.user.roles.should.have.lengthOf(1);
      return done();
    });
  });
  it("should notify when the new Role doesn't exist", function(done) {
    return _this.user.addRole('xxx', function(err) {
      should.exist(err);
      _this.user.roles.should.have.lengthOf(1);
      return done();
    });
  });
  return after(function(done) {
    mongoose.connection.db.dropCollection("permissions", function(err) {
      if (err) {
        return done(err);
      }
    });
    mongoose.connection.db.dropCollection("roles", function(err) {
      if (err) {
        return done(err);
      }
    });
    return mongoose.connection.db.dropCollection("users", function(err) {
      if (err) {
        done(err);
      }
      return done();
    });
  });
});
