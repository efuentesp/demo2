// Generated by CoffeeScript 1.6.3
(function() {
  var School, app, mongoose, request, should;

  should = require("should");

  request = require("supertest");

  mongoose = require("mongoose");

  app = require("../../server/main");

  School = mongoose.model('School');

  describe("SchoolsAPI", function() {
    var url;
    url = "http://localhost:9001";
    describe("GET /schools", function() {
      before(function(done) {
        var s, school, schools, _i, _len;
        schools = [
          {
            name: "Test School 1",
            www: "www.testschool1.edu.mx"
          }, {
            name: "Test School 2",
            www: "www.testschool2.edu.mx"
          }, {
            name: "Test School 3",
            www: "www.testschool3.edu.mx"
          }
        ];
        for (_i = 0, _len = schools.length; _i < _len; _i++) {
          s = schools[_i];
          school = new School(s);
          school.save(function(err) {
            if (err) {
              throw err;
            }
          });
        }
        return done();
      });
      it("should retrieve all Schools", function(done) {
        return request(url).get("/api/schools").expect('Content-Type', /json/).expect(200).end(function(err, res) {
          if (err) {
            throw err;
          }
          res.should.be.json;
          return done();
        });
      });
      return after(function(done) {
        return School.collection.remove(done);
      });
    });
    describe("POST /schools", function() {
      it("should creates a new School", function(done) {
        var school,
          _this = this;
        school = {
          name: "Test School 1",
          www: "www.testschool1.edu.mx"
        };
        return request(url).post("/api/schools").send(school).expect('Content-Type', /json/).expect(200).end(function(err, res) {
          if (err) {
            throw err;
          }
          _this.school_added = res.body;
          res.body.should.have.property('_id');
          res.body.name.should.equal('Test School 1');
          res.body.www.should.equal('www.testschool1.edu.mx');
          res.body.createdAt.should.not.equal(null);
          return done();
        });
      });
      return after(function(done) {
        return School.findById(this.school_added._id, function(err, school) {
          if (!err) {
            return school.remove(done);
          } else {
            throw err;
          }
        });
      });
    });
    describe("PUT /schools", function() {
      before(function(done) {
        this.school_before = new School({
          name: "New School",
          www: "www.newschool.edu.mx"
        });
        return this.school_before.save(done);
      });
      it("should update an existing School", function(done) {
        var school;
        school = {
          name: "Test School 1 modified",
          www: "www.mtestschool1.edu.mx"
        };
        return request(url).put("/api/schools/" + this.school_before._id).send(school).expect('Content-Type', /json/).expect(200).end(function(err, res) {
          if (err) {
            throw err;
          }
          res.body.should.have.property('_id');
          res.body.name.should.equal('Test School 1 modified');
          res.body.www.should.equal('www.mtestschool1.edu.mx');
          res.body.createdAt.should.not.equal(null);
          return done();
        });
      });
      return after(function(done) {
        return School.findById(this.school_before._id, function(err, school) {
          if (!err) {
            return school.remove(done);
          } else {
            throw err;
          }
        });
      });
    });
    return describe("DELETE /schools", function() {
      before(function(done) {
        this.school_before = new School({
          name: "New School",
          www: "www.newschool.edu.mx"
        });
        return this.school_before.save(done);
      });
      return it("should delete an existing School", function(done) {
        return request(url).del("/api/schools/" + this.school_before._id).expect(200).end(done);
      });
    });
  });

}).call(this);
