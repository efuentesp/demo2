// Generated by CoffeeScript 1.6.3
var User, jwt, mongoose;

mongoose = require('mongoose');

jwt = require('jwt-simple');

User = mongoose.model('User');

exports.auth = function(req, res) {
  var authorization, credentials, index, parts, password, scheme, username;
  authorization = req.headers.authorization;
  if (!authorization) {
    console.log("HTTP: Authorization not found!");
    res.statusCode = 400;
    return res.send("Error 400: HTTP: Authorization not found!");
  }
  parts = authorization.split(' ');
  scheme = parts[0];
  credentials = new Buffer(parts[1], 'base64').toString();
  index = credentials.indexOf(':');
  if (scheme === !'Basic' || index < 0) {
    console.log("Not Basic Authorization!");
    res.statusCode = 400;
    return res.send("Error 400: HTTP: Not Basic Authorization!");
  }
  username = credentials.slice(0, index);
  password = credentials.slice(index + 1);
  return User.findOne({
    username: username
  }, function(err, user) {
    var payload, secret, token;
    if (err) {
      return console.log(err);
    }
    if (user) {
      payload = {
        username: user.username,
        expires: Math.round(new Date().getTime() / 1000) + 3600
      };
      secret = 'Peacemakers2.0';
      token = jwt.encode(payload, secret);
      console.log(jwt.decode(token, secret));
      return res.send(token);
    } else {
      console.log("Resource not found!");
      res.statusCode = 400;
      return res.send("Error 400: Resource not found!");
    }
  });
};

exports.list = function(req, res) {
  console.log("GET: ");
  console.log(req.query);
  return User.find().exec(function(err, users) {
    if (!err) {
      return res.send(users);
    } else {
      return console.log(err);
    }
  });
};

exports.create = function(req, res) {
  var user;
  console.log("POST: ");
  console.log(req.body);
  user = new User(req.body);
  user.save(function(err) {
    if (!err) {
      return console.log("created");
    } else {
      return console.log(err);
    }
  });
  return res.send(user);
};
