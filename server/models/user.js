// Generated by CoffeeScript 1.6.3
var Schema, UserSchema, crypto, mongoose;

mongoose = require('mongoose');

crypto = require('crypto');

Schema = mongoose.Schema;

UserSchema = new Schema({
  username: {
    type: String,
    "default": ''
  },
  hashed_password: {
    type: String,
    "default": ''
  },
  email: {
    type: String,
    "default": ''
  },
  authToken: {
    type: String,
    "default": ''
  },
  salt: {
    type: String,
    "default": ''
  }
});

UserSchema.virtual('password').set(function(password) {
  this._password = password;
  this.salt = this.makeSalt();
  return this.hashed_password = this.encryptPassword(password);
}).get(function() {
  return this._password;
});

UserSchema.methods = {
  authenticate: function(plainText) {
    return this.encryptPassword(plainText) === this.hashed_password;
  },
  validateToken: function(token, tokenDecoded) {
    var now;
    if (token !== this.authToken) {
      return false;
    }
    now = Math.round(new Date().getTime() / 1000);
    return tokenDecoded.expires > now;
  },
  makeSalt: function() {
    return Math.round(new Date().valueOf() * Math.random()) + '';
  },
  encryptPassword: function(password) {
    var encrypred, err;
    if (!password) {
      return '';
    }
    try {
      encrypred = crypto.createHmac('sha1', this.salt).update(password).digest('hex');
      return encrypred;
    } catch (_error) {
      err = _error;
      return '';
    }
  }
};

mongoose.model('User', UserSchema);
